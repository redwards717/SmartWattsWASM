@inject AppState appState

<h5>@Day.ToString("dddd, dd MMMM")</h5>
@if(highestIntensity is not null)
{   
    <div class="day-wrapper" style="border: 2px solid @highestIntensity.Color; box-shadow: 5px 10px 10px @highestIntensity.Color;">
        <h4>@DateTimeUtilities.ConvertSecToReadable(Activites.Sum(a => a.MovingTime), false)</h4>
        @foreach(Activity activity in Activites)
        {
            @if(Activites.Count >= 1 && (activity.WeightedAvgWatts < (highestAvgWeightedWatts * .7) || activity.Intensity.EffortIndex <= 1))
            {
                <div class="brief-wrapper" style="background-color:@activity.Intensity.Color">
                    <h6> @activity.Name</h6>
                    <hr>
                    <span>@DateTimeUtilities.ConvertSecToReadable(activity.MovingTime) | Avg Watts: @(Convert.ToInt32(activity.AvgWatts)) | Weighted: @(Convert.ToInt32(activity.WeightedAvgWatts))</span>
                </div>
            }
            else
            {
                <div class="detailed-wrapper" style="border: 1px solid @highestIntensity.Color;">
                    <h4> @activity.Name</h4>
                    <span>@DateTimeUtilities.ConvertSecToReadable(activity.MovingTime) | Avg Watts: @(Convert.ToInt32(activity.AvgWatts)) | Weighted: @(Convert.ToInt32(activity.WeightedAvgWatts))</span>
                    <RidePowerTable Activity="activity"></RidePowerTable>
                </div>
            }
        }
    </div>
}


@code {
    [Parameter]
    public DateTime Day { get; set; }

    [Parameter]
    public List<Activity> Activites { get; set; }

    double highestAvgWeightedWatts;
    Intensity highestIntensity;

    protected override void OnParametersSet()
    {
        if(Activites is not null && Activites.Count > 0)
        {
            highestAvgWeightedWatts = Activites.Max(a => a.WeightedAvgWatts);
            var highestEffort = Activites.Max(a => a.Intensity.EffortIndex);
            highestIntensity = Activites.Find(a => highestEffort == a.Intensity.EffortIndex).Intensity;
        }
    }
}

