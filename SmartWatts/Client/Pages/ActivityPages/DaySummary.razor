@inject AppState appState

<h5>@Day.ToString("dddd, dd MMMM")</h5>
@if(Activites.Count > 0)
{   
    <div class="day-wrapper" style="border: 2px solid @highestIntensity.Color; box-shadow: 5px 10px 10px @highestIntensity.Color;">
        <h4>@DateTimeUtilities.ConvertSecToReadable(Activites.Sum(a => a.MovingTime), false)</h4>
        @foreach(Activity activity in Activites)
        {
            @if(Activites.Count >= 1 && (activity.WeightedAvgWatts < (highestAvgWeightedWatts * .7) || activity.Intensity.EffortIndex <= 1))
            {
                <div class="brief-wrapper" style="background-color:@activity.Intensity.Color">
                    <h6> @activity.Name <a class="btn btn-strava btn-sm" target="_blank" rel="noopener noreferrer" href=@($"https://www.strava.com/activities/{activity.StravaRideID}")>See On Strava</a></h6>
                    <hr>
                    <span>@DateTimeUtilities.ConvertSecToReadable(activity.MovingTime) | Avg Watts: @(Convert.ToInt32(activity.AvgWatts)) | Weighted: @(Convert.ToInt32(activity.WeightedAvgWatts))</span>
                </div>
            }
            else
            {
                int ridePercentEffort = @GetFullRidePercentEffort(activity);
                <div class="detailed-wrapper" style="border: 2px solid @activity.Intensity.Color">
                    <h4> @activity.Name <a class="btn btn-strava btn-sm" target="_blank" rel="noopener noreferrer" href=@($"https://www.strava.com/activities/{activity.StravaRideID}")>See On Strava</a></h4>
                    <span>
                        @DateTimeUtilities.ConvertSecToReadable(activity.MovingTime) | Avg Watts: @(Convert.ToInt32(activity.AvgWatts))
                        | Weighted: @(Convert.ToInt32(activity.WeightedAvgWatts))
                        <span class="intensity-perc" style="background: @PowerUtlities.GetIntensityFromEffortPercent(ridePercentEffort).Color; color: @PowerUtlities.GetIntensityFromEffortPercent(ridePercentEffort).FontColor;">
                            @ridePercentEffort%
                        </span>
                        (Benchmark: @activity.WeightedAvgBenchmark)
                    </span>
                    <div class="data-container">
                        <div class="power-table">
                            <RidePowerTable Activity="activity"></RidePowerTable>
                        </div>
                        <div class="sustained-efforts">
                            <RideSustainedEfforts Activity="activity"></RideSustainedEfforts>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}


@code {
    [Parameter]
    public DateTime Day { get; set; }

    [Parameter]
    public List<Activity> Activites { get; set; }

    double highestAvgWeightedWatts;
    Intensity highestIntensity;

    protected override void OnParametersSet()
    {
        if(Activites is not null && Activites.Count > 0)
        {
            highestAvgWeightedWatts = Activites.Max(a => a.WeightedAvgWatts);
            // errors here when loading in inital rides, looks like Activity.Intensity is null
            var highestEffort = Activites.Max(a => a.Intensity.EffortIndex);
            highestIntensity = Activites.Find(a => highestEffort == a.Intensity.EffortIndex).Intensity;
        }
    }

    private int GetFullRidePercentEffort(Activity activity)
    {
        var perc = (activity.WeightedAvgWatts / activity.WeightedAvgBenchmark) * 100;
        return perc > 999 ? 999 : (int)perc;
    }
}

