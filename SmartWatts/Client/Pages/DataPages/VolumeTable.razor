@inject AppState appState

<table class="table table-sm table-bordered">
    <tr>
        <th>Time Frame</th>
        <th>Volume</th>
        <th>Intensity</th>
        <th>@Constants.ANAEROBIC Efforts</th>
        <th>@Constants.VO2 Efforts</th>
        <th>@Constants.THRESHOLD Efforts</th>
    </tr>
    @for(int i = 0; i <= Period * 5; i += Period)
    {
        VolumeAverages currentVolume = new()
        {
            Time = 0,
            Intensity = @PowerUtlities.GetIntensityForTimeframe(appState.LoggedInUser.Activities, now.AddDays(-(i + Period)), now.AddDays(-i)),
            Anaerobic = @PowerUtlities.GetSustainedEfforts(appState.LoggedInUser.Activities, now.AddDays(-(i + Period)), now.AddDays(-i), @Constants.AnaerobicPZ.Time),
            VO2 = @PowerUtlities.GetSustainedEfforts(appState.LoggedInUser.Activities, now.AddDays(-(i + Period)), now.AddDays(-i), @Constants.VO2PZ.Time),
            Threshold = @PowerUtlities.GetSustainedEfforts(appState.LoggedInUser.Activities, now.AddDays(-(i + Period)), now.AddDays(-i), @Constants.ThresholdPZ.Time)
        };
        if(i == 0)
        {
        currentVolume.Time = PowerUtlities.GetVolumeInTime(appState.LoggedInUser.Activities, now.AddDays(-Period), now);
        <tr style="border-color:@GetCurrentPeriodColor(currentVolume)">
            <th>@now.AddDays(-Period).ToString("dd MMMM") to Current:</th>
            <td style="color:@(currentVolume.Time >= averages.Time ? "green" : "red")">@DateTimeUtilities.ConvertSecToReadable(currentVolume.Time, false)</td>
            <td style="color:@(currentVolume.Intensity >= averages.Intensity ? "green" : "red")">@currentVolume.Intensity</td>
            <td style="color:@(currentVolume.Anaerobic >= averages.Anaerobic ? "green" : "red")">@(currentVolume.Anaerobic > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Anaerobic) : "0s")</td>
            <td style="color:@(currentVolume.VO2 >= averages.VO2 ? "green" : "red")">@(currentVolume.VO2 > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.VO2) : "0s")</td>
            <td style="color:@(currentVolume.Threshold >= averages.Threshold ? "green" : "red")">@(currentVolume.Threshold > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Threshold) : "0s")</td>
        </tr>
        }
        else
        {
        currentVolume.Time = PowerUtlities.GetVolumeInTime(appState.LoggedInUser.Activities, now.AddDays(-(i+Period)), now.AddDays(-i));
        <tr>
            <th>@now.AddDays(-(i+Period)).ToString("dd MMMM") to @now.AddDays(-i).ToString("dd MMMM"):</th>
            <td style="color:@(currentVolume.Time >= averages.Time ? "green" : "red")">@DateTimeUtilities.ConvertSecToReadable(currentVolume.Time, false)</td>
            <td style="color:@(currentVolume.Intensity >= averages.Intensity ? "green" : "red")">@currentVolume.Intensity</td>
            <td style="color:@(currentVolume.Anaerobic >= averages.Anaerobic ? "green" : "red")">@(currentVolume.Anaerobic > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Anaerobic) : "0s")</td>
            <td style="color:@(currentVolume.VO2 >= averages.VO2 ? "green" : "red")">@(currentVolume.VO2 > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.VO2) : "0s")</td>
            <td style="color:@(currentVolume.Threshold >= averages.Threshold ? "green" : "red")">@(currentVolume.Threshold > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Threshold) : "0s")</td>
        </tr>
        }        
    }
    <tr>
        <th>Avg over past 365 days</th>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Time)</td>
        <td>@averages.Intensity</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Anaerobic)</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.VO2)</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Threshold)</td>    
    </tr>
</table>

@code {
    [Parameter]
    public int Period { get; set; }

    VolumeAverages averages = new();

    DateTime now = DateTime.Now;

    protected override void OnParametersSet()
    {
        averages = PowerUtlities.GetAllAverages(appState.LoggedInUser.Activities, now.AddDays(-365), now, 365/Period);
    }

    private string GetCurrentPeriodColor(VolumeAverages current)
    {
        int noAboveAvg = 0;
        noAboveAvg += current.Time >= averages.Time ? 1 : 0;
        noAboveAvg += current.Intensity >= averages.Intensity ? 1 : 0;
        noAboveAvg += current.Anaerobic >= averages.Anaerobic ? 1 : 0;
        noAboveAvg += current.VO2 >= averages.VO2 ? 1 : 0;
        noAboveAvg += current.Threshold >= averages.Threshold ? 1 : 0;

        return noAboveAvg >= 3 ? "green" : "red";
    }
}
