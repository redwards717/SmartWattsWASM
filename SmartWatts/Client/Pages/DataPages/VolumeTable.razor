@inject AppState appState
@inject NavigationManager nav

<table class="table table-sm table-bordered">
    <tr>
        <th>Time Frame</th>
        <th>Volume</th>
        <th>Intensity</th>
        <th>@Constants.ANAEROBIC Efforts</th>
        <th>@Constants.VO2 Efforts</th>
        <th>@Constants.THRESHOLD Efforts</th>
    </tr>
    @for(int i = 0; i < Period * Rows; i += Period)
    {
        VolumeAverages currentVolume = new()
        {
            Time = 0,
            Intensity = IntensityUtilities.GetIntensityForTimeframe(appState.LoggedInUser.Activities, BaseDate.AddDays(-(i + Period)), BaseDate.AddDays(-i)),
            Anaerobic = VolumeUtilities.GetSustainedEfforts(appState.LoggedInUser.Activities, BaseDate.AddDays(-(i + Period)), BaseDate.AddDays(-i), @Constants.AnaerobicPZ.Time),
            VO2 = VolumeUtilities.GetSustainedEfforts(appState.LoggedInUser.Activities, BaseDate.AddDays(-(i + Period)), BaseDate.AddDays(-i), @Constants.VO2PZ.Time),
            Threshold = VolumeUtilities.GetSustainedEfforts(appState.LoggedInUser.Activities, BaseDate.AddDays(-(i + Period)), BaseDate.AddDays(-i), @Constants.ThresholdPZ.Time)
        };
        currentVolume.Time = VolumeUtilities.GetVolumeInTime(appState.LoggedInUser.Activities, BaseDate.AddDays(-(i+Period)), BaseDate.AddDays(-i));
        DateTime start = BaseDate.AddDays(-(i + Period));
        DateTime end = BaseDate.AddDays(-i);
        <tr class="pointer" style="background:@GetCurrentPeriodColor(currentVolume)" @onclick='e => GoToRides(start, end)'>
            @if(i==0)
            {
                <th>@BaseDate.AddDays(-Period).ToString("dd MMMM") to Current:</th>
            }
            else
            {        
                <th>@BaseDate.AddDays(-(i+Period)).ToString("dd MMMM") to @BaseDate.AddDays(-i).ToString("dd MMMM"):</th>
            }
            <td style="color:@(currentVolume.Time >= averages.Time ? "green" : "red")">@DateTimeUtilities.ConvertSecToReadable(currentVolume.Time, false)</td>
            <td style="color:@(currentVolume.Intensity >= averages.Intensity ? "green" : "red")">@currentVolume.Intensity</td>
            <td style="color:@(currentVolume.Anaerobic >= averages.Anaerobic ? "green" : "red")">@(currentVolume.Anaerobic > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Anaerobic) : "0s")</td>
            <td style="color:@(currentVolume.VO2 >= averages.VO2 ? "green" : "red")">@(currentVolume.VO2 > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.VO2) : "0s")</td>
            <td style="color:@(currentVolume.Threshold >= averages.Threshold ? "green" : "red")">@(currentVolume.Threshold > 0 ? DateTimeUtilities.ConvertSecToReadable(currentVolume.Threshold) : "0s")</td>
        </tr>    
    }
    <tr>
        <th>Avg over past 365 days</th>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Time, false)</td>
        <td>@averages.Intensity</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Anaerobic)</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.VO2)</td>
        <td>@DateTimeUtilities.ConvertSecToReadable(averages.Threshold)</td>    
    </tr>
</table>

@code {
    [Parameter]
    public int Period { get; set; }

    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public DateTime BaseDate { get; set; }

    VolumeAverages averages = new();

    protected override void OnParametersSet()
    {
        averages = VolumeUtilities.GetAllAverages(appState.LoggedInUser.Activities, BaseDate.AddDays(-365), BaseDate, 365/Period);
    }

    private string GetCurrentPeriodColor(VolumeAverages current)
    {
        int noAboveAvg = 0;
        noAboveAvg += current.Time >= averages.Time ? 1 : 0;
        noAboveAvg += current.Intensity >= averages.Intensity ? 1 : 0;
        noAboveAvg += current.Anaerobic >= averages.Anaerobic ? 1 : 0;
        noAboveAvg += current.VO2 >= averages.VO2 ? 1 : 0;
        noAboveAvg += current.Threshold >= averages.Threshold ? 1 : 0;

        return noAboveAvg >= 3 ? "lightgreen" : "lightgrey";
    }

    private void GoToRides(DateTime start, DateTime end)
    {
        var normalizedStart = start.Date.ToUnixSeconds();
        var normalizedEnd = end.Date.AddDays(1).AddTicks(-1).ToUnixSeconds();
        nav.NavigateTo($"ridelog/{normalizedStart}/{normalizedEnd}");
    }
}
