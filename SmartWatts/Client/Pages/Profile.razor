@page "/profile";

@inject AppState appState; 
@inject IStravaService stravaService;
@inject IActivityService activityService;
@inject NavigationManager nav;

<h4>@appState.LoggedInUser.Email</h4>

@if (String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken) == false)
{
    <p>Linked to Strava ID: @appState.LoggedInUser.StravaAccessToken</p>
    <button @onclick=HandleSync>Sync Activities</button>

    <button @onclick=ParseRide>Test Ride</button>
}
else
{
    <button class="btn btn-strava" @onclick="RedirectToAuth">Link to Stava</button>
}

@code {
    private void RedirectToAuth()
    {
        UriBuilder uriBuilder = new()
        {
            Scheme = "https",
            Host = "strava.com",
            Path = "oauth/authorize"
        };

        var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query);
        paramValues.Add("client_id", Constants.STRAVA_CLIENT_ID);
        paramValues.Add("redirect_uri", $"{Constants.BASE_URI}/oauth2/");
        paramValues.Add("response_type", "code");
        paramValues.Add("scope", "activity:read_all,profile:read_all");

        uriBuilder.Query = paramValues.ToString();

        nav.NavigateTo(uriBuilder.Uri.AbsoluteUri);
    }

    private async Task HandleSync()
    {
        try
        {
            appState.LoaderOn();

            var activities = await stravaService.GetActivitiesForUser();
            await activityService.AddActivities(activities);
        }
        catch (Exception ex)
        {

        }
        finally
        {
            appState.LoaderOff();
        }
    }

    private async Task ParseRide()
    {
        var activities = await activityService.GetAllActivitiesByUser(appState.LoggedInUser);
        var data = await stravaService.GetDataStreamForActivity(activities[0], "watts");
    }
}

<style>
    .btn-strava {
        color: white;
        background-color: var(--strava-orange);
    }
</style>
