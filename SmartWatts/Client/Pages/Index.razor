@page "/"

@inject AppState appState; 
@inject NavigationManager nav;
@inject ILocalStorageService localStorage;
@inject IUserService userService;
@inject IActivityService activityService;
@inject IToastService toastService;

<div class="container-fluid">
@if(appState.UsersActivities is null)
{
    <h3>No Rides to Display</h3>
}
else
{
    
    @foreach(int year in years)
    {
        <button class="btn btn-confirm">@year</button>
    }


    <RideLog End="displayEnd" Start="displayStart"></RideLog>
}
</div>

@code{
    List<int> years = new();
    int selectedYear = DateTime.Today.Year;
    DateTime displayStart;
    DateTime displayEnd;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userid = await localStorage.GetItemAsync<string>("userid");

            if (String.IsNullOrWhiteSpace(userid) && appState.LoggedInUser is null)
            {
                nav.NavigateTo("/login");
                return;
            }
            else if (appState.LoggedInUser is null)
            {
                var user = await userService.GetUserById(userid);
                if(user == null)
                {
                    await localStorage.RemoveItemAsync("userid");
                    nav.NavigateTo("/login");
                    return;
                }

                if(user.TokenExpiration <= DateTime.Now)
                {
                    await userService.RefreshUserToken(user);
                }

                appState.SetUser(user);

                appState.LoaderOn("Scanning for new activities...");

                await activityService.GetAllActivitiesByUser(user);

                var newCount = await activityService.FindAndAddNewActivities(appState.LoggedInUser, 30);

                if(newCount > 0)
                {
                    toastService.ShowSuccess($"{newCount} new Activity(s) loaded in from Strava");
                }

            }
            LoadData();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"error initilizing user - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    public void LoadData()
    {
        years = DateTimeUtilities.GetActiveYears(appState.UsersActivities);

        displayEnd = DateTime.Now;
        displayStart = DateTime.Now.AddDays(-30);
    }
}

   







