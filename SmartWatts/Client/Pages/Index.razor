@page "/"
@page "/ridelog/{DisplayStart}/{DisplayEnd}"


@inject AppState appState; 
@inject NavigationManager nav;
@inject ILocalStorageService localStorage;
@inject IUserService userService;
@inject IActivityService activityService;
@inject IToastService toastService;

<div class="container-fluid">
@if(appState.LoggedInUser is null || appState.LoggedInUser.Activities is null)
{
    <h3>No Rides to Display</h3>
}
else
{
    <p>
        @foreach(int year in years)
        {
            <button class="btn @(year == selectedYear ? "btn-primary" : "btn-outline-primary")" @onclick="e => SelectYear(year)">@year</button>
        }
    </p>
    <p>
        @foreach(int month in Enum.GetValues(typeof(Constants.Months)))
        {
                <button class="btn @(month == selectedMonth ? "btn-primary" : "btn-outline-primary")" @onclick="e => SelectMonth(month)">@Enum.GetName(typeof(Constants.Months), month)</button>
        }
    </p>

    <RideLog End="DisplayEnd" Start="DisplayStart"></RideLog>
}
</div>

@code{
    [Parameter]
    public DateTime DisplayStart { get; set; }
    [Parameter]
    public DateTime DisplayEnd { get; set; }

    List<int> years = new();
    int selectedYear = DateTime.Today.Year;
    int selectedMonth = DateTime.Today.Month;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userid = await localStorage.GetItemAsync<string>("userid");

            if (String.IsNullOrWhiteSpace(userid) && appState.LoggedInUser is null)
            {
                nav.NavigateTo("/login");
                return;
            }
            else if (appState.LoggedInUser is null)
            {
                var user = await userService.GetUserById(userid);
                if(user == null)
                {
                    await localStorage.RemoveItemAsync("userid");
                    nav.NavigateTo("/login");
                    return;
                }

                if(user.TokenExpiration <= DateTime.Now)
                {
                    await userService.RefreshUserToken(user);
                }

                appState.SetUser(user);

                var newCount = await activityService.InitialDataLoadForExistingUSers();

                if(newCount > 1)
                {
                    toastService.ShowSuccess($"{newCount} new Activitys loaded in from Strava");
                }
                else if(newCount == 1)
                {
                    toastService.ShowSuccess($"new ride: {appState.LoggedInUser.Activities.Last().Name} loaded in from Strava");
                }

            }
            LoadData();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"error initilizing user - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    public void LoadData()
    {
        years = DateTimeUtilities.GetActiveYears(appState.LoggedInUser.Activities);

        DisplayEnd = DateTime.Now;
        DisplayStart = DateTime.Now.AddDays(-30);
    }

    private void SelectYear(int year)
    {
        selectedYear = year;
        DisplayEnd = new DateTime(year, selectedMonth, DateTime.DaysInMonth(year, selectedMonth));
        DisplayStart = new DateTime(year, selectedMonth, 1);
        StateHasChanged();
    }

    private void SelectMonth(int month)
    {
        selectedMonth = month;
        DisplayEnd = new DateTime(selectedYear, month, DateTime.DaysInMonth(selectedYear, month));
        DisplayStart = new DateTime(selectedYear, month, 1);
        StateHasChanged();

    }
}

   







