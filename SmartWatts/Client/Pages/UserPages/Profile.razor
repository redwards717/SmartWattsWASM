@page "/profile";

@inject AppState appState; 
@inject IStravaService stravaService;
@inject IActivityService activityService;
@inject IToastService toastService;
@inject NavigationManager nav;

<h4>@appState.LoggedInUser.Email</h4>

@if (String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken) == false)
{
    <p>Linked to Strava ID: @appState.LoggedInUser.StravaAccessToken</p>
    <button class="btn btn-strava" @onclick=HandleSync>Sync Activities From Strava</button>

    <button @onclick="NormalizePelotonData">Normalize Peloton Data</button>
}
else
{
    <button class="btn btn-strava" @onclick="RedirectToAuth">Link to Stava</button>
}

@code {
    private void RedirectToAuth()
    {
        UriBuilder uriBuilder = new()
        {
            Scheme = "https",
            Host = "strava.com",
            Path = "oauth/authorize"
        };

        var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query);
        paramValues.Add("client_id", Constants.STRAVA_CLIENT_ID);
        paramValues.Add("redirect_uri", $"{Constants.BASE_URI}/oauth2/");
        paramValues.Add("response_type", "code");
        paramValues.Add("scope", "activity:read_all,profile:read_all");

        uriBuilder.Query = paramValues.ToString();

        nav.NavigateTo(uriBuilder.Uri.AbsoluteUri);
    }

    private async Task HandleSync()
    {
        try
        {
            appState.LoaderOn("Looking for Strava activities...");
            // still need to test if i get rate limited. 
            var newCount = await activityService.FindAndAddNewActivities(appState.LoggedInUser, 100);

            if(newCount == 0)
            {
                toastService.ShowInfo("No new activities found");
            }
            else
            {
                toastService.ShowSuccess($"{newCount} Activity(s) loaded in from Strava");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"There was an error syncing data from Strava - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    private async Task NormalizePelotonData()
    {
        try
        {
            appState.LoaderOn("Making Peloton data more accurate...");

            DateTime dateDataWasFixed = new DateTime(2022, 3, 18); // march 18, 2022 is when the peloton was fixed

            await activityService.NormalizePelotonData(dateDataWasFixed, -30, appState.UsersActivities); // old peloton read about 30% too high

            toastService.ShowInfo("Peloton data has been fixed");
        }
        catch(Exception ex)
        {
            toastService.ShowError($"There was an error fixing Peloton data - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }
}
