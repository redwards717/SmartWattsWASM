@page "/profile";

@inject AppState appState; 
@inject IStravaService stravaService;
@inject IActivityService activityService;
@inject IFTPHistoryService ftpHistoryService;
@inject IUserService userService;
@inject IToastService toastService;
@inject NavigationManager nav;

<div class="container-fluid">

    <h4>Account: @appState.LoggedInUser.Email</h4>

    @if (String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken))
    {
        <p class="text-danger">Next Step: Link to Strava</p>
    }
    else if (FTP < 1)
    {
        <p class="text-danger">Next Step: Add your initial FTP </p>
    }
    else if(appState.LoggedInUser.Activities is null || appState.LoggedInUser.Activities.Count < 1)
    {
        <p class="text-danger">Next Step: Pull in rides from Strava</p>
    }
    else
    {
        <p>@appState.LoggedInUser.Activities.Count rides loaded in from Strava <br />
            Most Recent Loaded Ride:  @appState.LoggedInUser.Activities.Find(a => a.Date == mostRecentActivity).Name (@mostRecentActivity.ToShortDateString())</p>
    }

    <h3>Power Settings</h3>

    <div class="ftp-wrapper">
        <div class="row">
            <div class="col-6">
                @if(FTP < 1)
                {
                    <p class="text-danger font-italic">*please add your initial FTP from when you started using a power meter on Strava, after 45 days of data is uploaded the system will calculate your FTP automatically</p>
                }
                <p>
                    <label for="ftp">FTP: </label>
                    <input id="ftp" type="number" maxlength="3" @bind-value=FTP/>
                    <button class="btn btn-outline-primary" @onclick=SetFTP>Set FTP</button>
                </p>
                <p>
                    FTP will be calculated after enough data has been loaded,
                    <br />it can always be manually set here as well.
                </p>
            </div>
            <div class="col-6">
                <span>FTP History</span>
                <hr />
                <ul>
                    @foreach(FTPHistory ftp in ftpHistories)
                    {
                        <li>@(ftp.Date.ToUnixSeconds() <= 1 ? "Initial FTP" : ftp.Date.ToShortDateString()) : @ftp.FTP</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if(FTP > 0)
    {
        <PowerZones FTP="FTP"></PowerZones>
    }

    <h3 class="strava-title">Strava Intigration</h3>
    @if(String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken) == false)
    {
        <h4 class="text-danger">You are Linked to Strava!</h4>
    }
    @if (String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken) == false && FTP > 0)
    {
        @if(appState.LoggedInUser.Activities is not null && appState.LoggedInUser.Activities.Count() > 0)
        {   
        <div class="sync-container">
            <h6>Sync New Rides</h6>
            <hr />
            <p>Looks for strava rides from the last ride synced, in this case anything beyond @mostRecentActivity.ToShortDateString()</p>
            <button class="btn btn-strava" @onclick=HandleSyncNew>Sync New Rides</button>
        </div>
        }
        <div class="sync-container">
            <h6>Sync One Year of rides</h6>
            <hr />
            <p>This just grabs a years worth of data, which is enough to get you started. <br />
                Only thing missing will be the ability to see historic data <br />
                If the sync cuts off use the 'Sync New Rides' button above to resume from where the last ride was loaded in</p>
            <button class="btn btn-strava" @onclick=HandleSyncOneYear>Sync One Year</button>
        </div>
      @*  <div class="sync-container">
            <h6>Sync All Rides</h6>
            <hr />
            <p>Use this to sync all your rides from Strava, it's a LONG process.<br />
                If the sync cuts off use the 'Sync New Rides' button above to resume from where the last ride was loaded in</p>
            <button class="btn btn-strava" @onclick=HandleSyncAll>Sync All Rides</button>
        </div>*@
    }
    else if(String.IsNullOrWhiteSpace(appState.LoggedInUser.StravaAccessToken))
    {
        <button class="btn btn-strava" disabled @onclick="RedirectToAuth">Link to Stava</button>
    }


</div>


@code {
    int FTP;
    DateTime mostRecentActivity = new();
    List<FTPHistory> ftpHistories = new();

    protected override async Task OnInitializedAsync()
    {
        FTP = appState.LoggedInUser.FTP;
        mostRecentActivity = appState.LoggedInUser.Activities.Count > 0 ? appState.LoggedInUser.Activities.Max(a => a.Date) : mostRecentActivity;
        ftpHistories = await ftpHistoryService.GetFTPHistoriesByUser();
    }

    private void RedirectToAuth()
    {
        UriBuilder uriBuilder = new()
        {
            Scheme = "https",
            Host = "strava.com",
            Path = "oauth/authorize"
        };

        var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query);
        paramValues.Add("client_id", Constants.STRAVA_CLIENT_ID);
        paramValues.Add("redirect_uri", $"{Constants.BASE_URI}/oauth2/");
        paramValues.Add("response_type", "code");
        paramValues.Add("scope", "activity:read_all,profile:read_all");

        uriBuilder.Query = paramValues.ToString();

        nav.NavigateTo(uriBuilder.Uri.AbsoluteUri);
    }

    private async Task HandleSyncAll()
    {
        try
        {
            appState.LoaderOn("Looking for Strava activities...");

            ActivityParams activityParams = new ActivityParams()
            {
                User = appState.LoggedInUser,
                PerPage = 30,
                Page = 1,
                After = 1,
            };

            var countLoaded = await activityService.SyncRidesFromStrava(activityParams);

            if(countLoaded == 0)
            {
                toastService.ShowInfo("No new activities found to load");
            }
            else
            {
                toastService.ShowSuccess($"done loading in {countLoaded} Activity(s) from Strava");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"There was an error syncing data from Strava - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    private async Task HandleSyncNew()
    {
        try
        {
            appState.LoaderOn($"Looking for Strava activities since {mostRecentActivity.ToShortDateString()}...");

            ActivityParams activityParams = new ActivityParams()
            {
                User = appState.LoggedInUser,
                PerPage = 30,
                Page = 1,
                After = mostRecentActivity.ToUnixSeconds(),
            };

            var countLoaded = await activityService.SyncRidesFromStrava(activityParams);

            if(countLoaded == 0)
            {
                toastService.ShowInfo("No new activities found to load");
            }
            else
            {
                toastService.ShowSuccess($"done loading in {countLoaded} Activity(s) from Strava");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"There was an error syncing data from Strava - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    private async Task HandleSyncOneYear()
    {
        try
        {
            ActivityParams activityParams = new ActivityParams()
            {
                User = appState.LoggedInUser,
                PerPage = 30,
                Page = 1,
                After = DateTime.Now.AddDays(-410).ToUnixSeconds(),
            };

            appState.LoaderOn($"Looking for Strava activities...");

            var countLoaded = await activityService.SyncRidesFromStrava(activityParams);

            if(countLoaded == 0)
            {
                toastService.ShowInfo("No new activities found to load");
            }
            else
            {
                toastService.ShowSuccess($"done loading in {countLoaded} Activity(s) from Strava");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"There was an error syncing data from Strava - {ex.Message}");
        }
        finally
        {
            appState.LoaderOff();
        }
    }

    private async Task SetFTP()
    {
        try
        {   
            FTPHistory newHistory = new()
            {
                StravaUserID = appState.LoggedInUser.StravaUserID,
                Date = appState.LoggedInUser.FTP >= 1 ? DateTime.Now : DateTimeUtilities.UnixToDateTime(1),
                FTP = FTP
            };

            appState.LoggedInUser.FTP = FTP;
            await userService.UpdateUser(appState.LoggedInUser);

            await ftpHistoryService.InsertFTPHistory(newHistory);

            toastService.ShowSuccess($"FTP updated to {FTP}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Failed to update FTP - {ex.Message}");
        }
        finally
        {
            
        }
    }
}
